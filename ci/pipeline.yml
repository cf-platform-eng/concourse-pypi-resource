---
resource_types:

- name: pypi
  type: docker-image
  source:
    repository: cfplatformeng/concourse-pypi-resource
    tag: {{pypi-resource-tag}}

- name: pypi-acceptance
  type: docker-image
  source:
    repository: cfplatformeng/concourse-pypi-resource
    tag: acceptance

- name: pull-request
  type: docker-image
  source:
    repository: loggregatorbot/github-pr-resource
    required_review_approvals: 1

resources:

- name: code
  type: git
  source:
    uri: http://github.com/cf-platform-eng/concourse-pypi-resource
    ignore_paths:
    - .version

- name: docker-acceptance
  type: docker-image
  source:
    repository: cfplatformeng/concourse-pypi-resource
    tag: acceptance
    username: {{docker-username}}
    password: {{docker-password}}

- name: docker-production
  type: docker-image
  source:
    repository: cfplatformeng/concourse-pypi-resource
    tag: latest
    username: {{docker-username}}
    password: {{docker-password}}

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:cf-platform-eng/concourse-pypi-resource
    branch: main
    file: .version
    private_key: {{github-private-key}}

- name: test-package-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cf-platform-eng/concourse-pypi-resource
    branch: test-package-version
    file: test-package-version
    private_key: {{github-private-key}}

- name: acceptance-test-resource
  type: pypi-acceptance
  source:
    name: cf_platform_eng
    test: true
    username: {{pypi-username}}
    password: {{pypi-password}}

- name: pull-request
  type: pull-request
  source:
    repository: cf-platform-eng/concourse-pypi-resource
    access_token: {{github-pr-token}}

jobs:

- name: unit-test
  plan:
  - get: code
    trigger: true
  - task: run-unit-tests
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: python
          tag: '3.8'
      inputs:
      - name: code
      run:
        path: sh
        args:
        - -exc
        - |
          apt -q update
          apt -yq install python3-pip virtualenv
          pip install --no-input pipenv
          cd code && pipenv run make test

- name: package
  serial: true
  plan:
  - get: version
    params:
      bump: pre
      pre: rc
  - get: code
    trigger: true
    passed: [unit-test]
  - task: package
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: python
          tag: '3.8'
      inputs:
      - name: code
      - name: version
      outputs:
      - name: docker-build
      run:
        path: sh
        args:
        - -exc
        - |
          apt -q update
          apt -yq install virtualenv
          pip --no-input install pipenv
          cp version/version code/.version
          cd code && pipenv run make wheel
          cp -r Dockerfile dist ../docker-build/
  - put: docker-acceptance
    params:
      build: docker-build
      additional_tags: version/version
  - put: version
    params:
      file: version/version

- name: acceptance-test
  serial: true
  plan:
  - get: code
    passed: [package]
  - get: version
    passed: [package]
  - get: docker-acceptance
    trigger: true
    passed: [package]
  - put: test-package-version
    params:
      bump: patch
  - task: build-package
    config:
      image_resource:
        type: docker-image
        source:
          repository: python
          tag: '3.8'
      platform: linux
      inputs:
      - name: code
      - name: test-package-version
      outputs:
      - name: package-out
      run:
        path: sh
        args:
        - -exc
        - |
          export TEST_PACKAGE_VERSION="$(cat test-package-version/version)"
          export TEST_PACKAGE_NAME="cf_platform_eng"
          cd code/test/generalized_package
          python setup.py sdist
          cp dist/*.tar.gz ../../../package-out/
  - put: acceptance-test-resource
    params:
      glob: package-out/*.tar.gz
  - get: acceptance-test-resource

- name: promote-to-prod
  plan:
  - get: version
    passed: [acceptance-test]
    params:
      bump: final
  - get: docker-acceptance
    passed: [acceptance-test]
    params:
      save: true
  - put: docker-production
    params:
      load: docker-acceptance
      additional_tags: version/version
  - put: version
    params:
      file: version/version

- name: bump-major
  plan:
  - put: version
    params:
      bump: major
      pre: rc

- name: bump-minor
  plan:
  - put: version
    params:
      bump: minor
      pre: rc

- name: bump-patch
  plan:
  - put: version
    params:
      bump: patch
      pre: rc

- name: bump-rc
  plan:
  - put: version
    params:
      bump: pre
      pre: rc

- name: test-pull-request
  plan:
  - get: code
    resource: pull-request
    trigger: true
    version: every
    params:
      integration_tool: rebase
  - put: pull-request
    params:
      path: code
      status: pending
  - task: run-unit-tests
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: python
          tag: '3.8'
      inputs:
      - name: code
      run:
        path: sh
        args:
        - -exc
        - |
          apt -q update
          apt -yq install python3-pip virtualenv
          pip --no-input install pipenv
          cd code && mkdir -p .venv && pipenv run make test
    on_failure:
      put: pull-request
      params:
        path: code
        status: failure
  - put: pull-request
    params:
      path: code
      status: success
